package tropico.events;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Objects;

import tropico.Player;

public class Choice implements Iterable<Effect>, Serializable {

    /**
     * Necessary field to avoid warning while implementing Serializable
     */
    private static final long serialVersionUID = 1L;

    /**
     * The label of the Choice
     */
    private final String label;

    /**
     * The List of Effect for the Choice
     */
    private final List<Effect> effects;

    /**
     * The event generated by this choice
     */
    private final Event next;


    /**
     * <b>Choice's constructor</b>
     *
     * Creates a choice object, requiring the label, effects and next event.
     *
     * @param label        The label of the choice
     * @param effects      The effects of the choice
     * @param next         The event generated by this choice
     */
    public Choice(String label, List<Effect> effects, Event next) {
        this.label = label;
        this.effects = Objects.requireNonNull(effects);
        this.next = next;
    }

    @Override
    public String toString() {
        return label;
    }

    /**
     * Getter for the field label.
     *
     * @return The choice's label.
     */
    public String getLabel() {
        return label;
    }

    /**
     * Get if the choice has a next event.
     *
     * @return True if the choice has next event.
     */
    public boolean hasNextEvent() {
    	return next != null;
    }

    /**
     * Getter for the next event.
     *
     * @return The event generated by the choice.
     */
    public Event getNextEvent() {
    	return next;
    }

    /**
     * Choose this choice and apply effects on the Player p.
     *
     * @param p     The Player to apply effects.
     * @return      The next event.
     */
    public Event choose(Player p) {
    	for (Effect effect : effects) {
			effect.applyEffect(p);
		}
    	return next;
    }

    /**
     * Makes Choice iterable on his effects
     *
     * @return Iterator<Effect>
     */
    @Override
    public Iterator<Effect> iterator() {
        return effects.iterator();
    }
}
